//SLL  headNode remove kth from end    //// 1->2->3->4->5  =>   1->2->3->5 
function removeKthNode(headNode,k){

	int length = getLength(headNode);  //5
	
	if(k>length){
		//not possible break 
	}
	int position = 0;
	temp = headNode;
	prev = null;
	while(position<length - k){   //  3<3
		prev =temp;
		temp = temp.next;
		position++;
	}
	prev.next = temp.next;
	printList(headNode);

}
fucntion getLength(headNode){
	if(headNode.value==null)return 0;
	if(headNode.value!=null && headNode.next==null)return 1;       
	Node temp = headNode
	int count = 1;  
	while(temp.next!=null){
		count++;
		temp = temp.next;
	}
return count; //5
}
fucntion printList





function revWordsStrings(string){
	 String[] words = string.split(" ");
	 String revString ="";
	 for(int i = words.length-1;i>=0;i--){
		string += words[i] + " ";
	}
	// 	revString  " " at the end trim
	revString.trim(" ");
	System.out.println(revString);
}








//unsorted array
//target number
//return index of elements that sums up to target number
// only pair



function indexesTarget(arr,targetNum){  //      {3,2,4,1,7}
	int tempTarget = targetNum;	// 1
	int sum = 0;
        String indexes = "";        //   0 , 1, 3
	for(int i=0;i<arr.length;i++){
	  if(arr[i] <= tempTarget ){
 		indexes += i + ",";
		tempTarget -= arr[i];
	  }
	}
	print(indexes);	
}












































